#requires -Version 3.0 -Modules CimCmdlets, SecureBoot, TrustedPlatformModule
# xequires -RunAsAdministrator

# requires driver verifier on system.

# Test for Domain Controller first.
$osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
if($osInfo.ProductType -eq 2)
{
  Write-Error -Message 'Not compatible with domain controllers'
  Return
}

Function Get-DgReadiness
{
  <# Get-DgReadiness
      .SYNOPSIS
      Script to find out if machine is Device Guard compliant


      .DESCRIPTION
      Script to find out if machine is Device Guard compliant
      Log file with details is found here: C:\DGLogs 

      .PARAMETER Capable
      Describe parameter -Capable.

      .PARAMETER Ready
      To Verify the status of DG/CG and whether it is enabled or disabled

      .PARAMETER AutoReboot
      Reboots the computer

      .PARAMETER DG
      To Verify if this device is DG/CG Capable

      .PARAMETER CG
      To Verify if this device is DG/CG Capable

      .PARAMETER HVCI
      To Verify if this device is HVCI Capable

      .PARAMETER HLK
      Describe parameter -HLK.

      .PARAMETER Clear
      Describe parameter -Clear.

      .PARAMETER ResetVerifier
      Describe parameter -ResetVerifier.

      .EXAMPLE
      Get-DgReadiness  -Ready 
      To Verify the status of DG/CG and whether it is enabled or disabled
      ** Suggest turning this to the default

      .EXAMPLE
      Get-DgReadiness -Capable -DG 
      To Verify if this device is DG/CG Capable

      .EXAMPLE
      Get-DgReadiness -Capable  -CG 
      To Verify if this device is DG/CG Capable


      .EXAMPLE
      Get-DgReadiness -Capable  -HVCI 
      To Verify if this device is HVCI Capable

      .NOTES
      None at this time

      .LINK
      https://aka.ms/dgwhcr
      The first link is opened by Get-Help -Online Get-DgReadiness
    

      .INPUTS
      List of input types that are accepted by this function.

      .OUTPUTS
      1. Red Errors: Basic things are missing that will prevent enabling and using Device Guard / Credential Guard
      2. Yellow Warnings: This device can be used to enable and use Device Guard / Credential Guard, but additional security benefits will be absent.
      3. Green Messages: This device is fully compliant with Device Guard / Credential Guard requirements

      Log file with details is found here: $env:HOMEDRIVE\DGLogs 
  #>

  [CmdletBinding()]
  param(
    [switch]$Capable, 
    [switch]$Ready, 
    [switch]$Enable, 
    [switch]$Disable, 
    [Parameter(Mandatory = $false)][String]$SIPolicyPath, 
    [switch]$AutoReboot, 
    [switch]$DG, 
    [switch]$CG, 
    [switch]$HVCI, 
    [switch]$HLK, 
    [switch]$Clear, 
    [switch]$ResetVerifier,
    [string]$OutputFilePath = "$env:HOMEDRIVE\temp\DGLogs"
  )
  
  BEGIN
  {
    # Set Variables 
    $Script:LogFile = ('{0}\DeviceGuardCheckWrite-{1}.txt' -f $OutputFilePath, (Get-Date -Format MMddhhmmss))

    $Script:CompatibleModules = New-Object -TypeName System.Text.StringBuilder
    $Script:FailingModules = New-Object -TypeName System.Text.StringBuilder
    $Script:FailingExecuteWriteCheck = New-Object -TypeName System.Text.StringBuilder

    $Script:DGVerifyCrit = New-Object -TypeName System.Text.StringBuilder
    $Script:DGVerifyWarn = New-Object -TypeName System.Text.StringBuilder
    $Script:DGVerifySuccess = New-Object -TypeName System.Text.StringBuilder # Potentially Unsed Assignment
    $registryPath = 'HKCU:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities' # TEsting without admin
    #$registryPath = 'HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities'

    $Script:Sys32Path = "$env:windir\system32"
    $Script:DriverPath = "$env:windir\system32\drivers"

    if(!(Test-Path -Path $OutputFilePath))
    {
      New-Item -ItemType Directory -Path $OutputFilePath
    }



    #generated by certutil -encode 
    $SIPolicy_Encoded = 'BQAAAA43RKLJRAZMtVH2AW5WMHbk9wcuTBkgTbfJb0SmxaI0BACNkAgAAAAAAAAA
      HQAAAAIAAAAAAAAAAAAKAEAAAAAMAAAAAQorBgEEAYI3CgMGDAAAAAEKKwYBBAGC
      NwoDBQwAAAABCisGAQQBgjc9BAEMAAAAAQorBgEEAYI3PQUBDAAAAAEKKwYBBAGC
      NwoDFQwAAAABCisGAQQBgjdMAwEMAAAAAQorBgEEAYI3TAUBDAAAAAEKKwYBBAGC
      N0wLAQEAAAAGAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AQAAAAYAAAABAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA
      BgAAAAEAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAGAAAA
      AQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAABAAAA
      AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAEAAAABAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAGAAAAAQAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAYAAAABAAAAAgAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABgAAAAEAAAADAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAEAAAAGAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAQAAAAUAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAABAAAADgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAEAAAAOAAAAAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AQAAAA4AAAABAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA
      DgAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAOAAAA
      AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAA4AAAABAAAA
      AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAADgAAAAEAAAADAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAOAAAAAQAAAAEAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAABAAAAAQAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAPye3j3MoJGGstO/m3OKIFDLGlVN
      otyttV8/cu4XchN4AQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AQAAAAYAAAABAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA
      DgAAAAEAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHAAAA
      AQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAoAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAKAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAABAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAQAAAAYAAAABAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAABAAAABwAAAAEAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAABAAAAFAAAAIMAAAAAAAAADIAAAAsAAAAAAAAAAAAAAAEAAAAAAAAA
      AgAAAAAAAAADAAAAAAAAAAQAAAAAAAAABQAAAAAAAAALAAAAAAAAAAwAAAAAAAAA
      DQAAAAAAAAAOAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAMAAAAAAAAAAyAAAASAAAABgAAAAAAAAAHAAAAAAAAAAgAAAAAAAAA
      CQAAAAAAAAAKAAAAAAAAABMAAAAAAAAADwAAAAAAAAAQAAAAAAAAABEAAAAAAAAA
      EgAAAAAAAAAUAAAAAAAAABUAAAAAAAAAGgAAAAAAAAAbAAAAAAAAABwAAAAAAAAA
      FgAAAAAAAAAXAAAAAAAAABkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAgAAABQAAABQAG8AbABpAGMAeQBJAG4AZgBvAAAAAAAWAAAA
      SQBuAGYAbwByAG0AYQB0AGkAbwBuAAAAAAAAAAQAAABJAGQAAAAAAAMAAAAMAAAA
      MAAzADEAMAAxADcAAAAAABQAAABQAG8AbABpAGMAeQBJAG4AZgBvAAAAAAAWAAAA
      SQBuAGYAbwByAG0AYQB0AGkAbwBuAAAAAAAAAAgAAABOAGEAbQBlAAAAAAADAAAA
      JgAAAEQAZQBmAGEAdQBsAHQAVwBpAG4AZABvAHcAcwBBAHUAZABpAHQAAAAAAAAA
      AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA
    BQAAAAYAAAA='

    $HSTITest_Encoded = '

    ########
    # All messages and Error messages
    $MessageInfo = @{
      RebootRequired       = 'Please reboot the machine, for settings to be applied.'
      EnableVerifier       = 'Enabling Driver verifier'
      EnableVerifierReboot = 'Enabling Driver Verifier and Rebooting system'
      RebootTimer          = 'PC will restart in 30 seconds'
      Deprecated           = 'Feature has been deprecated'
      SuccessHVDIDriver    = 'No Incompatible Drivers found'
      SuccessMOR           = 'Secure MOR is available'
      Rewrite              = 'This section needs to be rewritten.'
    }

    $MessageWarning = @{
      IncompatibleHVDIDriver = 'Incompatible HVCI Kernel Driver Modules found'
      Warning_102            = 'Secure MOR is absent'
      Warning_100            = 'HVCI is already enabled on this machine, driver compat list might not be complete.'
      Warning_101            = 'Please disable HVCI and run the script again...'
    }

    $UserMessage = @{
      Error_100           = 'TPM is absent or not ready for use'
      Error_101           = 'Copying and loading HSTITest.dll failed'
      Error_303           = 'Disabling Hyper-V and IOMMU'
      DisableIsoUserMode  = 'OS Not Redstone, disabling IsolatedUserMode separately'
      FailWritingSIPolicy = 'Writing SIPolicy.p7b file failed'
      FailKernel32        = 'Instantiate-Kernel32 failed'
      FailKernel64        = 'Instantiate-Kernel64 failed'
      Error_3001          = 'Error: Capable is currently fully supported in Redstone only.'
      Error_3002          = '32Bit architecture '
      Error_3003          = 'If Secure Boot is supported on the system, enable Secure Boot in the BIOS and run the script again.'
      Error_3004          = 'If Virtualization extensions are supported on the system, enable hardware virtualization(Intel VirtualizationTechnology, Intel VT-x,Virtualization Extensions,or similar)in the BIOS and run the script again.'
      Error_3005          = 'Instantiate-HSTI failed'
      Error_3006          = 'Machine is not Device Guard  /Credential Guard  compatible because of the following:'
      Error_3007          = 'Secure Boot is absent/not enabled.'
      Error_3008          = 'This PC edition is Unsupported for Device Guard'
      Error_3009          = 'This PC is configured as a Domain Controller, Credential Guard  is not supported on DC.'
      Error_3010          = 'Unknown architecture'
      Error_3011          = 'Failed: Virtualization firmware check'
      Separator_1         = '###########################################################################'
      Information_1009    = 'Checking if the device is DG / CG Capable'
      Information_1010    = 'Copying and loading HSTITest.dll failed'
      Information_1011    = 'Copying HSTITest.dll'
      Information_1012    = 'Copying user provided SIpolicy.p7b'
      Information_1013    = 'Edit Registry: Deleting Reg Keys to disable Device Guard and Credential Guard'
      Information_1014    = 'Disabled: Device Guard and Credential Guard '
      Information_1015    = 'Disabled: Hyper-V and IOMMU '
      Information_1016    = 'Enabled: Driver verifier'
      Information_1017    = 'Enabled: Device Guard and Credential Guard '
      Information_1018    = 'Enabled: Driver verifier'
      Information_1019    = 'Enabled: Driver verifier and Rebooting system'
      Information_1020    = 'Enabled: Hyper-V and IOMMU '
      Information_1021    = 'OS Not Redstone, disabling Isolated User Mode separately'
      Information_1022    = 'OS Not Redstone, enabling Isolated User Mode separately'
      Information_1023    = 'Please reboot manually and run the script again....'
      Information_1024    = 'Please re-execute this script after reboot....'
      Information_1025    = 'Setting Reg Keys to enable Device Guard and Credential Guard'
      Information_1026    = 'To learn more about required hardware and software please visit: https://aka.ms/dgwhcr'
      Information_1027    = 'Verifying each module please wait....'
      Information_1028    = 'Writing SI Policy.p7b file failed'
      Information_1001    = 'Success: Device Guard and Credential Guard can be enabled on this machine.'
      Information_1002    = 'Success: Machine is Device Guard and Credential Guard  Ready.'
      Information_1008    = '64Bit architecture '
      Information_1029    = 'Disabled: Hyper-V and  IOMMU '
      Information_1030    = 'Enabled: Hyper-V and  IOMMU '
      Information_1031    = 'Success: HSTI validation'
      Information_1032    = 'Enabled: HVCI, and Config-Ciare running.'
      Information_1033    = 'Enabled: HVCI, Credential Guard and Config-Ciare running.'
      Information_1034    = 'Available: NX Protector'
      Information_1035    = 'Present: Secure Boot'
      Information_1036    = 'Available: SMM Mitigation'
      Information_1037    = 'Present: TPM1.2'
      Information_1038    = 'Present: TPM2.0'
      Information_1039    = 'Passed: Virtualization firmware check'
      Information_1040    = "Readiness Tool Version 3.4 Release.`n Tool to check if your device is capable to run Device Guard and Credential Guard ."
      Warning_2001        = 'Disabled: Hyper-V failed please check the log file'
      Warning_2002        = 'Enabled: Hyper-V failed please check the log file'
      Warning_2003        = 'HSTI is absent'
      Warning_2004        = 'Not all services are running.'
      Warning_2006        = 'NX Protector is absent'
      Warning_2007        = 'Running on a Virtual Machine. DG/CG is supported only if both guest VM and host machine are running with Windows10, version 1703 or later with English localization.'
      Warning_2008        = 'SMM Mitigation is absent'
      Warning_2009        = 'The following additional qualifications, if present, can enhance the security of Device Guard and Credential Guard on this system:'
      Information_1041    = 'HVCI is enabled and running.'
      Information_1042    = 'Credential Guard is enabled and running.'
    }

    $CheckList = [ordered]@{
      1 = @{
        Check   = 'Confirm-DriverCompatability'
        Message = 'Driver Compatability'
      }
      2 = @{
        Check   = 'Test-SecureBootState'
        Message = 'Secure boot present'
      }
      3 = @{
        Check   = 'Test-HSTI'
        Message = 'MS UEFI HSTI tests'
      }
      4 = @{
        Check   = 'Test-OSArchitecture'
        Message = 'OS Architecture'
      }
      5 = @{
        Check   = 'Confirm-OSSKU'
        Message = 'Supported OS SKU'
      }
      6 = @{
        Check   = 'Test-Virtualization'
        Message = 'Virtualization Firmware'
      }
      7 = @{
        Check   = 'Test-TPM'
        Message = 'TPM version'
      }
      8 = @{
        Check   = 'Test-SecureMOR'
        Message = 'Secure MOR'
      }
      9 = @{
        Check   = 'Test-NXProtection'
        Message = 'NX Protector'
      }
      10 = @{
        Check   = 'Test-SMMProtection'
        Message = 'SMM Mitigation'
      }
      11 = @{
        Check   = 'Show-Summary'
        Message = 'Summary'
      }
    }

    $WindowsVersions = @{
      1909 = @{
        Availabilitydate = '11/12/2019'
        OSbuild          = '18363.72'
        Endofservice     = '5/10/2022'
      }
      1903 = @{
        Availabilitydate = '5/21/2019'
        Osbuild          = '18362.72'
        Endofservice     = '12/8/2020'
      }
      1809 = @{
        Availabilitydate = '3/28/2019'
        Osbuild          = '17763.1098'
        Endofservice     = '5/11/2021'
      }
    }
    $ReleaseId = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ReleaseId
    #$($WindowsVersions.$ReleaseId.Endofservice)

    #########
    ## New Functions
    function Use-TranscriptLog 
    {
      <#
          .SYNOPSIS
          Creates a transcript of the session.
      #>

      [cmdletbinding(DefaultParameterSetName = 'Start')]
      param(
        [Parameter(Mandatory = $false, Position = 0,ParameterSetName = 'Start')]
        [Switch]$Start,
        [Parameter(Mandatory = $false, Position = 0,ParameterSetName = 'Stop')]
        [Switch]$Stop,
        [Parameter(Mandatory,Position = 1,ParameterSetName = 'Start')]
        [String]$LogFile
      )
      $LogFile = ('{0}\Transcript.txt' -f $OutputFilePath)
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      # Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      if ($Start)
      {
        Start-Transcript -Path $LogFile
        Write-Verbose -Message ('Find the transcript file here: {0}' -f $LogFile)
      }
      if ($Stop)
      {
        Stop-Transcript
        #Write-Verbose -Message ('Find the transcript file here: {0}' -f $LogFile)
      }
    }
    Use-TranscriptLog -Start $LogFile
    
    function Start-CheckList
    {
      <#
          .SYNOPSIS
          Run the checks listed in the hash table $Checklist

          .NOTES
          Place additional notes here.

      #>


      param
      (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, HelpMessage = 'Data to process')]
        $InputObject
      )
      process
      {
    
        Write-ProgressHelper -Message ($CheckList.$InputObject.Message) -StepNumber ($stepCounter) -Steps $Steps
        Write-Host $($CheckList.$InputObject.check)
        . ($CheckList.$InputObject.check)
        $stepCounter++
        
      }
    }

    function Write-ProgressHelper 
    {
      <#
          .SYNOPSIS
          Displays the progress bar with the current step
      #>

      param(
        [Parameter(Mandatory)][int]$StepNumber,
        [Parameter(Mandatory)][string]$message,
        [Parameter(Mandatory)][int]$Steps
      )
    
      Write-Progress -Activity 'Title' -Status $message -PercentComplete (($StepNumber / $Steps) * 100)
    }

    function Write-Log
    {
      <#
          .SYNOPSIS
          Used to write data to a date stamped log.  
          This is independent of the transcript which is over written each time.
      #>
      param
      (
        [Parameter(Mandatory)]
        [String]$LogMessage
      )
      
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose

      $timeStamp = Get-Date -UFormat '%D %T'

      Tee-Object -InputObject ('{0} : {1}' -f $timeStamp, $LogMessage) -FilePath $LogFile -Append
      Write-Verbose -Message ('Write-Log >>> {0}' -f $LogMessage)
    }

    function Write-Registry
    {
      <#
          .SYNOPSIS
          Used to write to the registry
          .NOTES
          String: Specifies a null-terminated string. Equivalent to REG_SZ.
          ExpandString: Specifies a null-terminated string that contains unexpanded references to environment variables that are expanded when the value is retrieved. Equivalent to REG_EXPAND_SZ.
          Binary: Specifies binary data in any form. Equivalent to REG_BINARY.
          DWord: Specifies a 32-bit binary number. Equivalent to REG_DWORD.
          MultiString: Specifies an array of null-terminated strings terminated by two null characters. Equivalent to REG_MULTI_SZ.
          Qword: Specifies a 64-bit binary number. Equivalent to REG_QWORD.
          Unknown: Indicates an unsupported registry data type, such as REG_RESOURCE_LIST.
      #>

      param(
        [Parameter(Mandatory)][String]$registryPath,
        [Parameter(Mandatory = $true)][String]$Name,
        [Parameter(Mandatory = $true)][String]$value,
        [Parameter(Mandatory = $true,HelpMessage = 'String=REG_SZ: ExpandString=REG_EXPAND_SZ: Binary=REG_BINARY: DWord=REG_DWORD: MultiString=REG_MULTI_SZ: Qword=REG_QWORD: Unknown=REG_RESOURCE_LIST')]
        [ValidateSet('String','ExpandString','Binary','DWord','MultiString','Qword','Unknown')] 
        [String]$PropertyType
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
      
      IF(!(Test-Path -Path $registryPath))

      {
        Write-Verbose -Message 'Writing to Registry'
        $null = New-Item -Path $registryPath -Force
        $null = New-ItemProperty -Path $registryPath -Name $Name -Value $value -PropertyType $PropertyType -Force
      }

      ELSE 
      {
        $null = New-ItemProperty -Path $registryPath -Name $Name -Value $value -PropertyType $PropertyType -Force
      }
    }
    #Write-Registry -registryPath 'HKCU:\SYSTEM\CurrentControlSet\Control\DeviceGuard' -Name 'EnableVirtualizationBasedSecurity' -value 1 -PropertyType DWORD

    Function Test-DeviceGuard 
    <#bookmark NewFunction #>
    <#bookmark Deprecated CheckDGRunning #>
    <#bookmark Deprecated CheckDGFeatures #>
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      [cmdletbinding(DefaultParameterSetName = 'Item')]
      param
      (
        [Parameter(ParameterSetName = 'Running', Position = 0)]
        [Switch]$CheckDGRunning,
        [Parameter(ParameterSetName = 'Features', Position = 0)]
        [Switch]$CheckDGFeatures,
        [Parameter(Mandatory,HelpMessage = 'Value to test against', Position = 1)]
        [Parameter(ParameterSetName = 'Running', Position = 1)]
        [Parameter(ParameterSetName = 'Features', Position = 1)]
        [int]$ItemValue
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

    
      if($CheckDGRunning)
      {
        $DgItem = 'SecurityServicesRunning'
      }
      if($CheckDGFeatures)
      {
        $DgItem = 'AvailableSecurityProperties'
      }

      $DGObj = Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\Microsoft\Windows\DeviceGuard

      for($i = 0; $i -lt $DGObj.$DgItem.length; $i++)
      {
        if($DGObj.$DgItem[$i] -eq $ItemValue)
        {
          return $true
        }
      }
      return $false
    }
    #Test-DeviceGuard -CheckDGRunning -ItemValue 2








    # /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
    # Ridiculous amount of one use Functions
    ##########
    function Test-IsExempt 
    {
      <#
          .SYNOPSIS
          Test to find if whatever item is passed is exempt.
      
          .NOTE
          May be able to be combined 
      #>
      param
      (
        [Parameter(Mandatory)][IO.FileInfo]
        $item
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      $cert = (Get-AuthenticodeSignature -FilePath $item.FullName).SignerCertificate
      if($cert.ToString().Contains('CN=Microsoft Windows, O=Microsoft Corporation, L=Redmond, S=Washington, C=US'))
      {
        Write-Log -LogMessage ('{0} {1}' -f $item.FullName, 'MS Exempted')
        return 1
      }
      else
      {
        Write-Log -LogMessage ('{0}.FullName Not-exempted' -f $item)
        Write-Log -LogMessage $cert.ToString()
        return 0
      }
    } 

    function Test-Exemption
    {
      <#
          .SYNOPSIS
          Test to find if the the mod is exempt

          .NOTE
          May be able to be combined 
      #>
      param
      (
        [Parameter(Mandatory)][String]$ModuleName
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))


      $mod1 = Get-ChildItem -Path $Sys32Path -Filter $ModuleName
      $mod2 = Get-ChildItem -Path $DriverPath -Filter $ModuleName
      if($mod1)
      { 
        Write-Log -LogMessage ('NonDriver module {0}.FullName' -f $mod1)
        return Test-IsExempt -item ($mod1) 
      }
      elseif($mod2)
      {
        Write-Log -LogMessage ('Driver Module {0}.FullName' -f $mod2)
        return Test-IsExempt -item ($mod2)
      }
    }

    function Test-FailedDriver
    {
      <#
          .SYNOPSIS
          Tests for a driver
      
          .NOTE
          May be able to be combined 
      #>
 
      param
      (
        [Parameter(Mandatory)][String]$ModuleName,

        [Parameter(Mandatory)]$CIStats
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      Write-Log -LogMessage ('Module: {0}' -f ($ModuleName.Trim()))
      if((Test-Exemption -ModuleName ($ModuleName.Trim())) -eq 1)
      {
        $null = $CompatibleModules.AppendLine(('Windows Signed: {0}.Trim()' -f $ModuleName))
        return
      }
      $index = $CIStats.IndexOf('execute pool type count:'.ToLower())
      if($index -eq -1)
      {
        return
      }
      $_tempStr = $CIStats.Substring($index)
      $Result = 'PASS'
      $separator = "`r`n", ''
      $option = [StringSplitOptions]::RemoveEmptyEntries
      $stats = $_tempStr.Split($separator,$option)
      Write-Log -LogMessage $stats.Count

      $FailingStat = ''
      foreach( $stat in $stats)
      {
        $_t = $stat.Split(':')
        if($_t.Count -eq 2 -and $_t[1].trim() -ne '0')
        {
          $Result = 'FAIL'
          $FailingStat = $stat
          break
        }
      }
      if($Result.Contains('PASS'))
      {
        $null = $CompatibleModules.AppendLine($ModuleName.Trim())
      }
      elseif($FailingStat.Trim().Contains('execute-write'))
      {
        $null = $FailingExecuteWriteCheck.AppendLine('Module: '+ $ModuleName.Trim() + "`r`n`tReason: " + $FailingStat.Trim() )
      }
      else
      {
        $null = $FailingModules.AppendLine('Module: '+ $ModuleName.Trim() + "`r`n`tReason: " + $FailingStat.Trim() )
      }
      Write-Log -LogMessage ('Result: {0}' -f $Result)
    }

    function Show-CIStats
    {
      <#
          .SYNOPSIS
          Displays the CI stats and then feeds them to the "Test-FailedDRiver"
      
          .NOTE
          May be able to be combined 
      #>
      param
      (
        [Parameter(Mandatory)][String]$_ModName,

        [Parameter(Mandatory)][Object]$str1
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      $i1 = $str1.IndexOf('Code Integrity Statistics:'.ToLower())
      if($i1 -eq -1 )
      {
        Write-Log -LogMessage ('String := {0}' -f $str1)
        Write-Log -LogMessage ('Warning! CI Stats are missing for {0}' -f $_ModName)
        return 
      }
      $temp_str1 = $str1.Substring($i1)
      $CIStats = $temp_str1.Substring(0).Trim()

      Test-FailedDriver -ModuleName $_ModName -CIStats $CIStats
    }

    function Show-ListOfDrivers
    {
      <#
          .SYNOPSIS
          Shows all of the Drivers on the machine.
      
          .NOTE
          May be able to be depracated.  It seems to do more talking than actual work.
      #>
      param
      (
        [Parameter(Mandatory)][Object]$str
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      $_tempStr = $str

      $separator = 'module:', ''
      $option = [StringSplitOptions]::RemoveEmptyEntries
      $index1 = $_tempStr.IndexOf('MODULE:'.ToLower())
      if($index1 -lt 0)
      {
        return
      }
      $_tempStr = $_tempStr.Substring($index1)
      $_SplitStr = $_tempStr.Split($separator,$option)


      Write-Log -LogMessage $_SplitStr.Count
      Write-Log -LogMessage $UserMessage.Information_1027
      foreach($ModuleDetail in $_SplitStr)
      {
        #Write-Confirm-OSSKU $Module
        $Index2 = $ModuleDetail.IndexOf('(')
        if($Index2 -eq -1)
        {
          'Skipping ..'
          continue
        }
        $ModName = $ModuleDetail.Substring(0,$Index2-1)
        Write-Log -LogMessage ('Driver: {0}' -f $ModName)
        Write-Log -LogMessage ('Processing module: {0}' -f $ModName)
        Show-CIStats -_ModName $ModName -str1 $ModuleDetail
      }

      $DriverScanCompletedMessage = ('Completed scan. List of Compatible Modules can be found at {0}' -f $LogFile)
      Write-Log -LogMessage $DriverScanCompletedMessage 

      if($FailingModules.Length -gt 0 -or $FailingExecuteWriteCheck.Length -gt 0 )
      {
        # $WarningMessage = $MessageWarning.IncompatibleHVDIDriver
        if($HLK)
        {
          Write-Verbose -Message $MessageWarning.IncompatibleHVDIDriver
          Write-Log -LogMessage $MessageWarning.IncompatibleHVDIDriver
        }
        else 
        {
          Write-Verbose -Message $MessageWarning.IncompatibleHVDIDriver
          Write-Log -LogMessage $MessageWarning.IncompatibleHVDIDriver
        }

        Write-Log -LogMessage $FailingExecuteWriteCheck.ToString()
        if($HLK)
        {
          Write-Log -LogMessage $FailingModules.ToString()
        }
        else
        {
          Write-Log -LogMessage $FailingModules.ToString()
        }
        if($FailingModules.Length -ne 0 -or $FailingExecuteWriteCheck.Length -ne 0 )
        {
          if($HLK)
          {
            $null = $DGVerifyCrit.AppendLine($MessageWarning.IncompatibleHVDIDriver)
          }
          else
          {
            $null = $DGVerifyWarn.AppendLine($MessageWarning.IncompatibleHVDIDriver)
          }
        }
      }
      else
      {
        Write-Log -LogMessage $MessageInfo.SuccessHVDIDriver
      }
    }

    function Show-Summary()
    {
      <#
          .SYNOPSIS
          Make changes to the Registry
      
          .NOTE
          It is labled as a "Show", but does make a lot of changes to the registry.  This needs to be relabled and moved to the Set-DGReadiness
      #>

      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      if($DGVerifyCrit.Length -ne 0 )
      {
        Write-Log -LogMessage 'Machine is not Device Guard / Credential Guard compatible because of the following:'
        Write-Log -LogMessage $DGVerifyCrit.ToString()
        Write-Log -LogMessage $DGVerifyWarn.ToString()
        if(!$HVCI -and !$DG)
        {
          #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "CG_Capable" /t REG_DWORD /d 0 /f '
          Write-Registry -registryPath $registryPath -Name 'CG_Capable' -value 0 -PropertyType DWord
        }
        if(!$CG)
        {
          # Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "DG_Capable" /t REG_DWORD /d 0 /f '
          # Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "HVCI_Capable" /t REG_DWORD /d 0 /f '

          Write-Registry -registryPath $registryPath -Name 'DG_Capable' -value 0 -PropertyType DWord
          Write-Registry -registryPath $registryPath -Name 'HVCI_Capable' -value 0 -PropertyType DWord
        }
      }
      elseif ($DGVerifyWarn.Length -ne 0 )
      {
        Write-Log -LogMessage "Device Guard / Credential Guard can be enabled on this machine.`n"
        Write-Log -LogMessage 'The following additional qualifications, if present, can enhance the security of Device Guard / Credential Guard on this system:'
        Write-Log -LogMessage $DGVerifyWarn.ToString()
        if(!$HVCI -and !$DG)
        {
          #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "CG_Capable" /t REG_DWORD /d 1 /f '
          Write-Registry -registryPath $registryPath -Name 'CG_Capable' -value 1 -PropertyType DWord
        }
        if(!$CG)
        {
          #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "DG_Capable" /t REG_DWORD /d 1 /f '
          #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "HVCI_Capable" /t REG_DWORD /d 1 /f '
          Write-Registry -registryPath $registryPath -Name 'DG_Capable' -value 1 -PropertyType DWord
          Write-Registry -registryPath $registryPath -Name 'HVCI_Capable' -value 1 -PropertyType DWord
        }
      }
      else
      {
        Write-Log -LogMessage $MessageInfo.Info_130 # Info_130 = 'Machine is Device Guard / Credential Guard Ready.' 

        if(!$HVCI -and !$DG)
        {
          #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "CG_Capable" /t REG_DWORD /d 2 /f '
          Write-Registry -registryPath $registryPath -Name 'CG_Capable' -value 2 -PropertyType DWord
        }
        if(!$CG)
        {
          #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "DG_Capable" /t REG_DWORD /d 2 /f '
          #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "HVCI_Capable" /t REG_DWORD /d 2 /f '
          Write-Registry -registryPath $registryPath -Name 'DG_Capable' -value 2 -PropertyType DWord
          Write-Registry -registryPath $registryPath -Name 'HVCI_Capable' -value 2 -PropertyType DWord
        }
      }
    }

    function Instantiate-Kernel32 
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      try 
      {
        Add-Type -TypeDefinition @'
 using System;
 using System.Diagnostics;
 using System.Runtime.InteropServices;
 
 public static class Kernel32
 {
 [DllImport("kernel32", SetLastError=true, CharSet = CharSet.Ansi)]
 public static extern IntPtr LoadLibrary(
 [MarshalAs(UnmanagedType.LPStr)]string lpFileName);
 
 [DllImport("kernel32", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
 public static extern IntPtr GetProcAddress(
 IntPtr hModule,
 string procName);
 }
 
'@
      }
      catch
      {
        Write-Log -LogMessage $_.Exception.Message 
        Write-Log -LogMessage $($UserMessage.FailKernel32)
      }
    }

    function Instantiate-HSTI 
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      try 
      {
        Add-Type -TypeDefinition @'
 using System;
 using System.Diagnostics;
 using System.Runtime.InteropServices;
 using System.Net;
 
 public static class HstiTest3
 {
 [DllImport("hstitest.dll", CharSet = CharSet.Unicode)]
 public static extern int QueryHSTIdetails( 
 ref HstiOverallError pHstiOverallError, 
 [In, Out] HstiProviderErrorDuple[] pHstiProviderErrors,
 ref uint pHstiProviderErrorsCount,
 byte[] hstiPlatformSecurityBlob,
 ref uint pHstiPlatformSecurityBlobBytes);

 [DllImport("hstitest.dll", CharSet = CharSet.Unicode)]
 public static extern int QueryHSTI(ref bool Pass); 
 
 [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
 public struct HstiProviderErrorDuple
 {
 internal uint protocolError;
 internal uint role;
 internal HstiProviderErrors providerError;
 [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
 internal string ID;
 [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 4096)]
 internal string ErrorString;
 }
 
 [FlagsAttribute]
 public enum HstiProviderErrors : int
 {
 None = 0x00000000,
 VersionMismatch = 0x00000001,
 RoleUnknown = 0x00000002,
 RoleDuplicated = 0x00000004,
 SecurityFeatureSizeMismatch = 0x00000008,
 SizeTooSmall = 0x00000010,
 VerifiedMoreThanImplemented = 0x00000020,
 VerifiedNotMatchImplemented = 0x00000040
 }

 [FlagsAttribute]
 public enum HstiOverallError : int
 {
 None = 0x00000000,
 RoleTooManyPlatformReference = 0x00000001,
 RoleTooManyIbv = 0x00000002,
 RoleTooManyOem = 0x00000004,
 RoleTooManyOdm = 0x00000008,
 RoleMissingPlatformReference = 0x00000010,
 VerifiedIncomplete = 0x00000020,
 ProtocolErrors = 0x00000040,
 BlobVersionMismatch = 0x00000080,
 PlatformSecurityVersionMismatch = 0x00000100,
 ProviderError = 0x00000200
 } 
 
 }
'@

        #$LibHandle = [Kernel32]::LoadLibrary("$env:windir\System32\hstitest.dll")
        # $FuncHandle = [Kernel32]::GetProcAddress($LibHandle, 'QueryHSTIdetails')
        # $FuncHandle2 = [Kernel32]::GetProcAddress($LibHandle, 'QueryHSTI')

        if ([IntPtr]::Size -eq 8) 
        {
          #assuming 64 bit 
          Write-Log -LogMessage ("`nKernel32::LoadLibrary 64bit --> 0x{0}" -f ('{0:X16}' -f $LibHandle.ToInt64()))
          Write-Log -LogMessage ('HstiTest2::QueryHSTIdetails 64bit --> 0x{0}' -f ('{0:X16}' -f $FuncHandle.ToInt64()))
        }
        else
        {
          return
        }
        # $overallError = New-Object -TypeName HstiTest3+HstiOverallError
        $providerErrorDupleCount = New-Object -TypeName int
        $blobByteSize = New-Object -TypeName int
        #$hr = [HstiTest3]::QueryHSTIdetails([ref] $overallError, $null, [ref] $providerErrorDupleCount, $null, [ref] $blobByteSize)

        [byte[]]$blob = New-Object -TypeName byte[] -ArgumentList $blobByteSize
        #[HstiTest3+HstiProviderErrorDuple[]]$providerErrors = New-Object -TypeName HstiTest3+HstiProviderErrorDuple[] -ArgumentList $providerErrorDupleCount 
        #$hr = [HstiTest3]::QueryHSTIdetails([ref] $overallError, $providerErrors, [ref] $providerErrorDupleCount, $blob, [ref] $blobByteSize)
        $string = $null
        $blob | ForEach-Object -Process {
          $string = ("{0} {1}.ToString('X2')," -f $string, $_)
        }

        $hstiStatus = New-Object -TypeName bool
        #$hr = [HstiTest3]::QueryHSTI([ref] $hstiStatus)

        Write-Log -LogMessage ('HSTI Duple Count: {0}' -f $providerErrorDupleCount)
        Write-Log -LogMessage ('HSTI Blob size: {0}' -f $blobByteSize)
        Write-Log -LogMessage ('String: {0}' -f $string)
        Write-Log -LogMessage ('HSTIStatus: {0}' -f $hstiStatus)
        if(($blobByteSize -gt 512) -and ($providerErrorDupleCount -gt 0) -and $hstiStatus)
        {
          Write-Log -LogMessage 'HSTI validation successful'
        }
        elseif(($providerErrorDupleCount -eq 0) -or ($blobByteSize -le 512))
        {
          Write-Log -LogMessage 'HSTI is absent'
          $null = $DGVerifyWarn.AppendLine('HSTI is absent')
        }
        else
        {
          $ErrorMessage = 'HSTI validation failed'
          if($HLK)
          {
            Write-Log -LogMessage $ErrorMessage
            $null = $DGVerifyCrit.AppendLine($ErrorMessage)
          }
          else 
          {
            Write-Log -LogMessage $ErrorMessage
            $null = $DGVerifyWarn.AppendLine('HSTI is absent')
          }
        }
      }
      catch 
      {
        Write-Log -LogMessage $_.Exception.Message 
        Write-Log -LogMessage 'Instantiate-HSTI failed'
      }
    }



    function Write-ConfigCIDetails
    <#bookmark Renamed Function PrintConfigCIDetails - Line-509 #>
    {
      <#
          .SYNOPSIS
          Display the state of the CI
      
          .NOTE
          Replaced PrintConfigCIDetails.
      #>

      param
      (
        [Parameter(Mandatory)][Object]$ConfigCIState
      )
      $ConfigCIRunning = 'Config-CI is enabled and running.'
      $ConfigCIDisabled = 'Config-CI is not running.'
      $ConfigCIMode = 'Not Enabled'

      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Rewrite))

      switch ($ConfigCIState)
      {
        0 
        {
          $ConfigCIMode = 'Not Enabled'
        }
        1 
        {
          $ConfigCIMode = 'Audit mode'
        }
        2 
        {
          $ConfigCIMode = 'Enforced mode'
        }
        default 
        {
          $ConfigCIMode = 'Not Enabled'
        }
      }

      if($ConfigCIState -ge 1)
      {
        Write-Log -LogMessage ('{0} ({1})' -f $ConfigCIRunning, $ConfigCIMode)
        $FunctionMessage = $MyInvocation.MyCommand
        Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
        Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Rewrite))
      }
      else
      {
        Write-Log -LogMessage ('{0} ({1})' -f $ConfigCIDisabled, $ConfigCIMode)
        $FunctionMessage = $MyInvocation.MyCommand
        Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
        Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Rewrite))
      }
    }

    function Show-HVCIDetails
    <#bookmark Renamed Function PrintHVCIDetails - Line-532 #>
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      param
      (
        [Parameter(Mandatory)][Object]$_HVCIState
      )
      $_HvciRunning = 'HVCI is enabled and running.'
      $_HvciDisabled = 'HVCI is not running.'
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))


      if($_HVCIState)
      {
        Write-Log -LogMessage $_HvciRunning
      }
      else
      {
        Write-Log -LogMessage $_HvciDisabled
      }
    }

    function Show-CGDetails
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      param
      (
        [Parameter(Mandatory)][Object]$_CGState
      )
      $_CGRunning = 'Credential-Guard is enabled and running.'
      $_CGDisabled = 'Credential-Guard is not running.'
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))


      if($_CGState)
      {
        Write-Log -LogMessage $_CGRunning
      }
      else
      {
        Write-Log -LogMessage $_CGDisabled
      }
    }

    function Test-OSVersion
    {
      <#
          .SYNOPSIS
          Returns the OS version and build      
          .NOTE
          Get-Readiness
      #>
      param
      (
        [Parameter(Mandatory = $false)][string]$OSbuild
      )
 
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
     
      $OsVersion = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion'
      $Product = $OsVersion.ProductName
      $Version = $OsVersion.ReleaseId
      $OSbuild = ('{0}' -f ($OsVersion.CurrentBuild))
      $FullBuild = ('Product: {0} - Version: {1} (Build: {2})' -f $Product, $Version, $build)
      Write-Verbose -Message $FullBuild

      Return $OSbuild
    }
    Test-OSVersion -Verbose

    function Execute-CommandAndLog
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      param
      (
        [Parameter(Mandatory)][Object]$_cmd
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      try
      {
        Write-Log -LogMessage ('Executing: {0}' -f $_cmd)
        Write-Verbose -Message "$CmdOutput = Invoke-Command -ScriptBlock $_cmd | Out-String"
        #Write-Log -LogMessage ('Output: {0}' -f $CmdOutput)
      }
      catch 
      {
        Write-Log -LogMessage ('Exception while exectuing {0}' -f $_cmd)
        Write-Log -LogMessage $_.Exception.Message 
      }
    }

    function Print-RebootWarning
    <#bookmark Deprecated #>
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
    }

    function Auto-RebootHelper
    <#bookmark Deprecated #>
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
      if($AutoReboot)
      {
        $FunctionMessage = $MyInvocation.MyCommand
        Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
        Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
        #Confirm-OSSKU -message 'PC will restart in 30 seconds'
        #Execute-CommandAndLog -_cmd 'shutdown /r /t 30'
      }
      else
      {
        Write-Warning -Message $MessageInfo.RebootRequired
        Write-Log -LogMessage  $MessageInfo.RebootRequired
      }
    }

    function Reset-Verifier  
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $verifier_state = & "$env:windir\system32\verifier.exe" /query | Out-String
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      if(!$verifier_state.ToString().Contains('No drivers are currently verified.'))
      {
        Write-Verbose -Message "Execute-CommandAndLog -_cmd 'verifier.exe /reset'"
      }
      Auto-RebootHelper
    }

    function Write-HardwareReq
    <#bookmark Deprecated PrintHardwareReq #>
    {
      <#
          .SYNOPSIS
          OS and Hardware requirements for enabling Device Guard and Credential Guard

          .DESCRIPTION
          OS and Hardware requirements for enabling Device Guard and Credential Guard
          1. OS SKUs: Available only on these OS Skus - Enterprise, Server, Education, Enterprise IoT, Pro, and Home
          2. Hardware: Recent hardware that supports virtualization extension with SLAT

          .NOTE
          Deprecated PrintHardwareReq 

          .LINK
          https://aka.ms/dgwhcr
          The first link is opened by Get-Help -Online Write-HardwareReq
      #>

      param(
        [Parameter(Mandatory = $false)][String]$MsgDetails
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
    }

    function Confirm-DriverCompatability
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      [CmdletBinding()]
      param(
        [Parameter(Mandatory = $false)]$MsgDetails
      )
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      #Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))


      $_HVCIState = Test-DeviceGuard -CheckDGRunning -ItemValue 2
      if($_HVCIState)
      {
        Write-Log -LogMessage $MessageWarning.Warning_100
        Write-Log -LogMessage $MessageWarning.Warning_101
      }
      Write-Verbose -Message $MyInvocation.ScriptLineNumber
      $verifier_state = & "$env:windir\system32\verifier.exe" /query | Out-String
      if($verifier_state.ToString().Contains('No drivers are currently verified.'))
      {
        Write-Log -LogMessage ('Enabling Driver verifier - {0}' -f $MyInvocation.ScriptLineNumber)
        & "$env:windir\system32\verifier.exe" /flags 0x02000000 /all /log.code_integrity

        Write-Log -LogMessage ('Enabling Driver Verifier and Rebooting system - {0}' -f $MyInvocation.ScriptLineNumber)
        Write-Log -LogMessage $verifier_state 
        Write-Log -LogMessage ('Please re-execute this script after reboot.... - {0}' -f $MyInvocation.ScriptLineNumber)
        
        Write-Warning -Message $MessageInfo.RebootRequired
        <#
            if($AutoReboot)
            {
            #Confirm-OSSKU -message 'PC will restart in 30 seconds'
            #Execute-CommandAndLog -_cmd 'shutdown /r /t 30'
            }
            else
            {
            Write-Log -LogMessage 'Please reboot manually and run the script again....'
            }
        #>
        Write-Verbose -Message 'exit'
      }
      else
      {
        Write-Log -LogMessage ('Driver verifier already enabled - {0}' -f $MyInvocation.ScriptLineNumber)
        Write-Log -LogMessage $verifier_state 
        Show-Summary -str ($verifier_state.Trim().ToLowerInvariant())
      }
    }

    function Test-IsDomainController # Replaced by test at to of script
    <#bookmark Deprecated #>
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
      <#
          $_isDC = 0
          $CompConfig = Get-WmiObject -Class Win32_ComputerSystem
          foreach ($ObjItem in $CompConfig) 
          {
          $Role = $ObjItem.DomainRole
          Write-Log -LogMessage ('Role={0}' -f $Role)
          Switch ($Role) 
          {
          0 
          {
          Write-Log -LogMessage 'Standalone Workstation'
          }
          1 
          {
          Write-Log -LogMessage 'Member Workstation'
          }
          2 
          {
          Write-Log -LogMessage 'Standalone Server'
          }
          3 
          {
          Write-Log -LogMessage 'Member Server'
          }
          4 
          {
          Write-Log -LogMessage 'Backup Domain Controller'
          $_isDC = 1
          break
          }
          5 
          {
          Write-Log -LogMessage 'Primary Domain Controller'
          $_isDC = 1
          break
          }
          default 
          {
          Write-Log -LogMessage 'Unknown Domain Role'
          }
          }
          }
          return $_isDC
      #>
    }

    function Confirm-OSSKU  # Does  not seem to be used anywhere
    <#bookmark Deprecated #>
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
      <#
          $osname = $((Get-WmiObject -Class win32_operatingsystem).Name).ToLower()
          $_SKUSupported = 0
          Write-Log -LogMessage ('OSNAME:{0}' -f $osname)
          $SKUarray = @('Enterprise', 'Education', 'IoT', 'Windows Server', 'Pro', 'Home')
          $HLKAllowed = @('microsoft windows 10 pro')
          foreach ($SKUent in $SKUarray) 
          {
          if($osname.ToString().Contains($SKUent.ToLower()))
          {
          $_SKUSupported = 1
          break
          }
          }

          # For running HLK tests only, professional SKU's are marked as supported.
          if($HLK)
          {
          if($osname.ToString().Contains($HLKAllowed.ToLower()))
          {
          $_SKUSupported = 1
          }
          }
          $_isDomainController = Test-IsDomainController
          if($_SKUSupported)
          {
          Write-OSSKUErrorWrite-OSSKUError -message 'This PC edition is Supported for DeviceGuard'
          if(($_isDomainController -eq 1) -and !$HVCI -and !$DG)
          {
          Write-Log -LogMessage 'This PC is configured as a Domain Controller, Credential Guard is not supported on DC.'
          }
          Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "OSSKU" /t REG_DWORD /d 2 /f '
          }
          else 
          {
          Write-Log -LogMessage 'This PC edition is Unsupported for Device Guard'
          $null = $DGVerifyCrit.AppendLine('OS SKU unsupported')
          Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "OSSKU" /t REG_DWORD /d 0 /f '
          }
      #>
    }
    
    function Test-OSArchitecture  # For Checks only.  Does no work. 
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      $OSArch = $(Get-WmiObject -Class win32_operatingsystem).OSArchitecture
      Write-Log -LogMessage $OSArch 
      if($OSArch.Contains('32-bit'))
      {
        Write-Log -LogMessage ('32 Bit OS - {0}' -f $MyInvocation.ScriptLineNumber)
      }
      elseif($OSArch.Contains('64-bit'))
      {
        Write-Log -LogMessage ('64 Bit OS. - {0}' -f $MyInvocation.ScriptLineNumber) 
        $null = $DGVerifyCrit.AppendLine('32 Bit OS, OS Architecture failure..')
      }
      else
      {
        Write-Log -LogMessage ('Unknown architecture - {0}' -f $MyInvocation.ScriptLineNumber)
        $null = $DGVerifyCrit.AppendLine('Unknown OS, OS Architecture failure..')
      }
    }

    function Test-SecureBootState
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $_secureBoot = Confirm-SecureBootUEFI
      Write-Log -LogMessage $_secureBoot
      if($_secureBoot)
      {
        Write-Log -LogMessage ('Secure Boot is present - {0}' -f $MyInvocation.ScriptLineNumber)
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "SecureBoot" /t REG_DWORD /d 2 /f '
        Write-Registry -registryPath $registryPath -Name 'SecureBoot' -value 2 -PropertyType DWord
      }
      else
      {
        Write-Log -LogMessage ('Secure Boot is absent / not enabled. - {0}' -f $MyInvocation.ScriptLineNumber)
        Write-Log -LogMessage ('If Secure Boot is supported on the system, enable Secure Boot in the BIOS and run the script again. - {0}' -f $MyInvocation.ScriptLineNumber)
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "SecureBoot" /t REG_DWORD /d 0 /f '
        Write-Registry -registryPath $registryPath -Name  'SecureBoot' -value 0 -PropertyType DWord
        $null = $DGVerifyCrit.AppendLine('Secure boot validation failed.')
      }
    }

    function Test-Virtualization
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $_vmmExtension = $(Get-WmiObject -Class Win32_processor).VMMonitorModeExtensions
      $_vmFirmwareExtension = $(Get-WmiObject -Class Win32_processor).VirtualizationFirmwareEnabled
      $_vmHyperVPresent = (Get-CimInstance -ClassName Win32_ComputerSystem).HypervisorPresent
      Write-Log -LogMessage ('VMMonitorModeExtensions {0}' -f $_vmmExtension)
      Write-Log -LogMessage ('VirtualizationFirmwareEnabled {0}' -f $_vmFirmwareExtension)
      Write-Log -LogMessage ('HyperVisorPresent {0}' -f $_vmHyperVPresent)

      #success if either processor supports and enabled or if hyper-v is present
      if(($_vmmExtension -and $_vmFirmwareExtension) -or $_vmHyperVPresent )
      {
        Write-Log -LogMessage 'Virtualization firmware check passed'
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "Virtualization" /t REG_DWORD /d 2 /f '
        Write-Registry -registryPath $registryPath -Name 'Virtualization' -value 2 -PropertyType DWord
      }
      else
      {
        Write-Log -LogMessage 'Virtualization firmware check failed.'
        # Write-Log -LogMessage 'If Virtualization extensions are supported on the system, enable hardware virtualization (Intel Virtualization Technology, Intel VT-x, Virtualization Extensions, or similar) in the BIOS and run the script again.'
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "Virtualization" /t REG_DWORD /d 0 /f '
        Write-Registry -registryPath $registryPath -Name 'Virtualization' -value 0 -PropertyType DWord
        $null = $DGVerifyCrit.AppendLine('Virtualization firmware check failed.')
      }
    }

    function Test-TPM
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      # Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
      $WarningMsg = $FunctionMessage
      $TPMLockout = $(Get-Tpm).LockoutCount # Administrator privilege is required to execute this command.

      if($TPMLockout)
      {
        if($TPMLockout.ToString().Contains('Not Supported for TPM 1.2'))
        {
          if($HLK)
          {
            Write-Log -LogMessage ('TPM 1.2 is present. - {0}' -f $MyInvocation.ScriptLineNumber)
          }
          else
          {
            $WarningMsg = ('TPM 1.2 is Present. TPM 2.0 is Preferred. - {0}' -f $MyInvocation.ScriptLineNumber)
            Write-Log -LogMessage $WarningMsg
            $null = $DGVerifyWarn.AppendLine($WarningMsg)
          }
        }
        else
        {
          Write-Log -LogMessage ('TPM 2.0 is present. - {0}' -f $MyInvocation.ScriptLineNumber)
        }
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "TPM" /t REG_DWORD /d 2 /f '
        Write-Verbose -Message 'TPM -value 2' 
        Write-Registry -registryPath $registryPath -Name 'TPM' -value 2 -PropertyType DWord
      }
      else
      {
        $WarningMsg = $UserMessage.Error_100 
        if($HLK)
        {
          Write-Log -LogMessage $WarningMsg
          $null = $DGVerifyCrit.AppendLine($WarningMsg)
        }
        else
        {
          Write-Log -LogMessage $WarningMsg
          $null = $DGVerifyWarn.AppendLine($WarningMsg)
        }
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "TPM" /t REG_DWORD /d 0 /f '
        Write-Registry -registryPath $registryPath -Name 'TPM' -value 0 -PropertyType DWord
      }
    }

    function Test-SecureMOR
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      # Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      $isSecureMOR = Test-DeviceGuard -CheckDGFeatures -ItemValue 4
      Write-Log -LogMessage ('isSecureMOR= {0} ' -f $isSecureMOR) 
      if($isSecureMOR -eq 1)
      {
        Write-Log -LogMessage $MessageInfo.SuccessMOR
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "SecureMOR" /t REG_DWORD /d 2 /f '
        Write-Registry -registryPath $registryPath -Name 'SecureMOR' -value 2 -PropertyType DWord
      }
      else
      {
        $WarningMsg = $MessageWarning.Warning_102
        if($HLK)
        {
          Write-Log -LogMessage $WarningMsg
          $null = $DGVerifyCrit.AppendLine($WarningMsg)
        }
        else
        {
          Write-Log -LogMessage $WarningMsg
          $null = $DGVerifyWarn.AppendLine($WarningMsg)
        }
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "SecureMOR" /t REG_DWORD /d 0 /f '
        Write-Registry -registryPath $registryPath -Name 'SecureMOR' -value 0 -PropertyType DWord
      }
    }

    function Test-NXProtection
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      # Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      
      $isNXProtected = Test-DeviceGuard  -CheckDGFeatures -ItemValue 5
      Write-Log -LogMessage ('isNXProtected= {0} ' -f $isNXProtected) 
      if($isNXProtected -eq 1)
      {
        Write-Log -LogMessage ('NX Protector is available - {0}' -f $MyInvocation.ScriptLineNumber)
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "UEFINX" /t REG_DWORD /d 2 /f '
        Write-Registry -registryPath $registryPath -Name 'UEFINX' -value 2 -PropertyType DWord
      }
      else
      {
        Write-Log -LogMessage ('NX Protector is absent - {0}' -f $MyInvocation.ScriptLineNumber)
        $null = $DGVerifyWarn.AppendLine('NX Protector is absent')
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "UEFINX" /t REG_DWORD /d 0 /f '
        Write-Registry -registryPath $registryPath -Name 'UEFINX' -value 0 -PropertyType DWord
      }
    }

    function Test-SMMProtection
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      # Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      $isSMMMitigated = Test-DeviceGuard -CheckDGFeatures -ItemValue 6
      Write-Log -LogMessage ('isSMMMitigated= {0} ' -f $isSMMMitigated) 
      if($isSMMMitigated -eq 1)
      {
        Write-Log -LogMessage ('SMM Mitigation is available - {0}' -f $MyInvocation.ScriptLineNumber)
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "SMMProtections" /t REG_DWORD /d 2 /f '
        Write-Registry -registryPath $registryPath -Name 'SMMProtections' -value 2 -PropertyType DWord
      }
      else
      {
        Write-Log -LogMessage ('SMM Mitigation is absent - {0}' -f $MyInvocation.ScriptLineNumber)
        $null = $DGVerifyWarn.AppendLine('SMM Mitigation is absent')
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "SMMProtections" /t REG_DWORD /d 0 /f '
        Write-Registry -registryPath $registryPath -Name 'SMMProtections' -value 0 -PropertyType DWord
      }
    }

    function Test-HSTI
    {
      <#
          .SYNOPSIS
          Default Comment based Help.  This still needs to be completed.
      
          .NOTE
          This still needs to be completed.
      #>
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      # Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))

      
      Write-Log -LogMessage ('Copying HSTITest.dll - {0}' -f $MyInvocation.ScriptLineNumber)
      try 
      {
        $HSTITest_Decoded = [Convert]::FromBase64String($HSTITest_Encoded)
        [IO.File]::WriteAllBytes("$env:windir\System32\hstitest.dll",$HSTITest_Decoded)
      }
      catch 
      {
        Write-Log -LogMessage $_.Exception.Message 
        Write-Log -LogMessage ('Copying and loading HSTITest.dll failed - {0}' -f $MyInvocation.ScriptLineNumber)
      }

      Instantiate-Kernel32
      Instantiate-HSTI
    }


  } # End BEGIN section


  ######################################################################################################################################
  ######################################################################################################################################
  ######################################################################################################################################
  ######################################################################################################################################

  PROCESS
  {  
    [int]$Steps = ($CheckList.Count)
    $stepCounter = 01
    $CheckList.Keys | Start-CheckList
    <#   
        for($stepCounter = 01;$stepCounter -le $Steps;$stepCounter++)
        {
        Write-ProgressHelper -Message ($CheckList.$stepCounter.Message) -StepNumber ($stepCounter) -Steps $Steps
        Write-Host $($CheckList.$stepCounter.check)
        . ($CheckList.$stepCounter.check)
        }
    #>Write-ToolVersion   <# Deprecated PrintToolVersion #>
    # If no switches selected (if(!($Ready) -and !($Capabl...) then display instructions. Changed to Comment Based Help - Line-948
    # Test for Admin $TestForAdmin Deprecated by moving to "requires" area - Line-1003
    


    <# Check the DG status if enabled or disabled, meaning if the device is ready or not #>
    if($Ready)
    {
      Write-Verbose -Message "Most of this was justing tests, so it was moved, so you don't have to use the ready switch"
      $FunctionMessage = $MyInvocation.MyCommand
      Write-Verbose -Message ('Entering function: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0}: {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
    }

    Write-HardwareReq <# Deprecated PrintHardwareReq #>

    # Get current state of Device Guard
    $DGRunning = [string](Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\Microsoft\Windows\DeviceGuard).SecurityServicesRunning
    $_ConfigCIState = $(Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\Microsoft\Windows\DeviceGuard).CodeIntegrityPolicyEnforcementStatus
    # Write-Log -LogMessage ('Current DGRunning = {0}, ConfigCI= {1}' -f $DGRunning, $_ConfigCIState)
    Write-Verbose -Message $DGRunning
    Write-Verbose -Message $_ConfigCIState
    $FunctionMessage = $MyInvocation.MyCommand
    Write-Verbose -Message ('Function: {0}' -f $FunctionMessage) #-Verbose
    # Get current state of Device Guard
      

    $_HVCIState = [string](Test-DeviceGuard -CheckDGRunning -ItemValue 2)
    $_CGState = [String](Test-DeviceGuard -CheckDGRunning -ItemValue 1)

    if($HVCI) 
    <# If "HVCI switch, show the status #>
    { 
      $FunctionMessage = 'If "HVCI switch, show the status'
      Write-Verbose -Message ('Entering "if" Statment: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0} : {1}' -f $FunctionMessage, $($MessageInfo.Deprecated))
    } # Do not edit $HVCI above - delete latere

    Write-Verbose -Message ('_HVCIState: {0}' -f $_HVCIState) 
    if($_HVCIState)
    {
      $FunctionMessage = '$_HVCIState'
      Write-Verbose -Message ('Entering "if" Statment: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0} : {1}' -f $FunctionMessage, $($MessageInfo.rewrite))
      Write-Log -LogMessage $UserMessage.Information_1041
    }
    else
    {
      Write-Log -LogMessage $UserMessage.HvciDisabled
    }
      
    <#bookmark elseif($CG) #>
    Write-Verbose -Message ('_CGState: {0}' -f $_CGState)
    if($_CGState)      
    {
      $FunctionMessage = '$_CGState'
      Write-Verbose -Message ('Entering "if" Statment: {0}' -f $FunctionMessage) #-Verbose
      Write-Warning -Message ('{0} : {1}' -f $FunctionMessage, $($MessageInfo.rewrite))
      Write-Log -LogMessage $UserMessage.Information_1041
      Write-Log -LogMessage $UserMessage.Information_1042
    }
    else      
    {
      Write-Log -LogMessage $UserMessage.CGDisabled
    }


    ## Original end Of "if(Ready)" - Line-1803



    <#bookmark elseif($CG) 
        {
        Write-Log -LogMessage ('_CGState: {0}' -f $_CGState)
        Show-CGDetails -_CGState $_CGState
 
        if($_CGState)
        {
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "CG_Running" /t REG_DWORD /d 1 /f'
        Write-Verbose -Message 'CG_Running -value 1'
        Write-Registry -registryPath $registryPath -Name 'CG_Running' -value 1 -PropertyType DWORD
        }
        else
        {
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "CG_Running" /t REG_DWORD /d 0 /f'
        Write-Verbose -Message 'CG_Running -value 0'
        Write-Registry -registryPath $registryPath -Name 'CG_Running' -value 0 -PropertyType DWORD
        }
        } 
    #>
    <#bookmark  elseif($DG) #>
    #{
    Write-Log -LogMessage ('_HVCIState: {0}, _ConfigCIState: {1}' -f $_HVCIState, $_ConfigCIState) 

    Show-HVCIDetails -_HVCIState $_HVCIState
    # Write-ConfigCIDetails -_ConfigCIState $_ConfigCIState 
    #>
    if($_ConfigCIState -and $_HVCIState)
    {
      Write-Log -LogMessage ('HVCI, and Config-CI are enabled and running.' )
 
      #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "DG_Running" /t REG_DWORD /d 1 /f'
      Write-Verbose -Message 'DG_Running -value 1'
      #Write-Registry -registryPath $registryPath -Name 'DG_Running' -value 1 -PropertyType DWORD
    }
    <#else
        {
        Write-Log -LogMessage ('Not all services are running. - {0}' -f $MyInvocation.ScriptLineNumber)
 
        #Execute-CommandAndLog -_cmd 'REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Capabilities\" /v "DG_Running" /t REG_DWORD /d 0 /f'
        Write-Verbose -Message 'DG_Running -value 0'
        #Write-Registry -registryPath $registryPath -Name 'DG_Running' -value 0 -PropertyType DWORD
    }#>
    #}
    else 
    {
      Write-Log -LogMessage ('_CGState: {0}, _HVCIState: {1}, _ConfigCIState: {2}' -f $_CGState, $_HVCIState, $_ConfigCIState) 
 
      Show-CGDetails -_CGState $_CGState
      Show-HVCIDetails -_HVCIState $_HVCIState
      # Write-ConfigCIDetails -_ConfigCIState $_ConfigCIState

      if(($DGRunning.Length -ge 2) -and ($_CGState) -and ($_HVCIState) -and ($_ConfigCIState -ge 1))
      {
        Write-Log -LogMessage ('HVCI, Credential-Guard, and Config-CI are enabled and running. - {0}' -f $MyInvocation.ScriptLineNumber)
      }
      else
      {
        Write-Log -LogMessage ('Not all services are running. - {0}' -f $MyInvocation.ScriptLineNumber)
      }
    }
    #}


    if($Capable) 
    {
      # Test Virtual System
      $isRunningOnVM = (Get-WmiObject -Class win32_computersystem).model
      if($isRunningOnVM.Contains('Virtual'))
      {
        Write-Warning -Message $UserMessage.Warning_2007
        Write-Log -LogMessage $UserMessage.Warning_2007
      }
      # Test Virtual System
   
      if((([environment]::OSVersion).Version.Build) -gt 10586)
      {
        Write-Log -LogMessage ('Checking if the device is DG/CG Capable')
        Write-Verbose -Message 'Operating System Good'
      }
    }
    
  } #End PROCESS section

  END
  {Use-TranscriptLog -Stop}
}
